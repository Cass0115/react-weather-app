{"version":3,"sources":["components/Titles.js","components/Form.js","components/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","className","cityID","temperature","description","error","Form","onSubmit","getForecast","type","name","placeholder","Forecast","forecast_city","forecast","forecast_date","forecast1","forecast_date1","forecast2","forecast_date2","forecast3","forecast_date3","forecast4","forecast_date4","API_KEY","App","state","undefined","city","country","humidity","getWeather","e","a","async","fetch","then","api_call_onload","json","data","console","log","setState","isLoaded","main","temp","weather","preventDefault","target","elements","value","forecast_call","forecast_data","Math","round","list","dt_txt","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc6e8f93.chunk.js","sourcesContent":["import React from 'react';\n\nconst Titles = (props) => (\n    <div>\n        <h1 className=\"title-container__title\">Weather Finder</h1>\n        <h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\n\n        {props.cityID && <p>Location: {props.cityID}</p>}\n        {props.temperature && <p>Temperature: {props.temperature} &#8457;</p>}\n        <p>{props.description}</p>\n        {props.error && <p>{props.error}</p>}\n    </div>\n);\n\nexport default Titles;","import React from 'react';\n\n\n// class Form extends React.Component {\n//     render() {\n//         return(\n//             <form onSubmit={this.props.getWeather}>\n//                 <input type=\"text\" name=\"city\" placeholder=\"City\" />\n//                 {/* <input type=\"text\" name=\"country\" placeholder=\"Country\" /> */}\n//                 <button>Get Weather</button>\n//             </form>\n//         )\n//     }\n//  } \n\n\nconst Form = (props) => (\n    <form onSubmit={props.getForecast}>\n        <input type=\"text\" name=\"city\" placeholder=\"City\" />\n         {/* <input type=\"text\" name=\"country\" placeholder=\"Country\" /> */}\n        <button>Get Weather</button>\n    </form>\n );\n\nexport default Form;","import React from 'react';\n\n\nconst Forecast = (props) => (\n    <div>\n        {props.forecast_city && <p>Location: {props.forecast_city}</p>}\n        {/* today (0) */}\n        {props.forecast && <p>Temperature: {props.forecast} &#8457;</p>}\n        {props.forecast_date && <p>Date: {props.forecast_date} </p>}\n\n        {/* tomorrow (1) */}\n        {props.forecast1 && <p>Temperature: {props.forecast1} &#8457;</p>}\n        {props.forecast_date1 && <p>Date: {props.forecast_date1} </p>}\n        \n\n        {/* (2)  */}\n        {props.forecast2 && <p>Temperature: {props.forecast2} &#8457;</p>}\n        {props.forecast_date2 && <p>Date: {props.forecast_date2} </p>}\n\n        {/* (3)  */}\n        {props.forecast3 && <p>Temperature: {props.forecast3} &#8457;</p>}\n        {props.forecast_date3 && <p>Date: {props.forecast_date3} </p>}\n\n        {/* (4)  */}\n        {props.forecast4 && <p>Temperature: {props.forecast4} &#8457;</p>}\n        {props.forecast_date4 && <p>Date: {props.forecast_date4} </p>}\n\n        <p>{props.description}</p>\n        {props.error && <p>{props.error}</p>}\n    </div>\n)\n\nexport default Forecast;\n\n","import React from 'react';\nimport './App.css';\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\n// import Weather from \"./components/Weather\";\nimport Forecast from \"./components/Forecast\";\n// import * as reactRouter from \"react-router\";\n\n\nconst API_KEY = \"0d1548ee736784b23abbe6a2cce6a6a6\";\n\n\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    forecast_date: undefined,\n    error: undefined\n  }\n\n\n  getWeather = async (e) => {\n    const cityID = \"6173331,1850144,2643743,5809844\";\n    const data = await fetch(`http://api.openweathermap.org/data/2.5/group?id=${cityID}&appid=${API_KEY}&units=imperial`)\n    .then(api_call_onload => api_call_onload.json());\n    console.log(data);\n      if(cityID) {\n        this.setState({\n          isLoaded: true,\n          temperature: data.main.temp,\n          city: data.name,\n          description: data.weather[0].description,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n            isLoaded: true,\n            temperature: undefined,\n            city: undefined,\n            description: undefined,\n            error: \"Please enter a city\"\n        });\n      }\n  }\n\n  getForecast = async (e) => {\n    e.preventDefault();\n    const forecast_city = e.target.elements.city.value;\n    const forecast_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${forecast_city}&appid=${API_KEY}&units=imperial&cnt=40`);\n    const forecast_data = await forecast_call.json();\n    if(forecast_city) {\n      this.setState({\n        forecast_city: forecast_data.city.name,\n\n        forecast: Math.round(forecast_data.list[7].main.temp),\n        forecast1: Math.round(forecast_data.list[15].main.temp),\n        forecast2: Math.round(forecast_data.list[23].main.temp),\n        forecast3: Math.round(forecast_data.list[31].main.temp),\n        forecast4: Math.round(forecast_data.list[39].main.temp),\n        \n        \n        forecast_date: forecast_data.list[7].dt_txt,\n        forecast_date1: forecast_data.list[15].dt_txt,\n        forecast_date2: forecast_data.list[23].dt_txt,\n        forecast_date3: forecast_data.list[31].dt_txt,\n        forecast_date4: forecast_data.list[39].dt_txt,\n        error: \"\"\n      })\n      console.log(this.forecast);\n    } else {\n      this.setState({\n        forecast: undefined,\n        forecast_city: undefined,\n        forecast_date: undefined,\n        error: \"Please enter a city\"\n    })\n  }\n}\n  \n  \n  render() { \n    return (\n      \n        <div className=\"wrapper\"> \n          <Titles />\n          \n          {/* <Form getWeather={this.getWeather}/> */}\n\n          <Form getForecast={this.getForecast}/>   \n\n          {/* <Weather\n            temperature={this.state.temperature}\n            humitidy={this.state.humidity}\n            city={this.state.city}\n            country={this.state.country}\n            description={this.state.description}\n            error={this.state.error}\n          /> */}\n          \n          <Forecast \n\n            forecast_city={this.state.forecast_city}\n            \n            forecast={this.state.forecast}\n            forecast1={this.state.forecast1}\n            forecast2={this.state.forecast2}\n            forecast3={this.state.forecast3}\n            forecast4={this.state.forecast4}\n\n            \n            forecast_date={this.state.forecast_date}\n            forecast_date1={this.state.forecast_date1}\n            forecast_date2={this.state.forecast_date2}\n            forecast_date3={this.state.forecast_date3}\n            forecast_date4={this.state.forecast_date4}\n\n            error={this.state.error}\n          />\n        </div>\n    \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}